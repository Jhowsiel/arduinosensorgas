#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <EEPROM.h>

ESP8266WebServer server(80);

const char* ssid = "SEU_SSID";
const char* password = "SUA_SENHA_WIFI";
const char* phoneNumber = "SEU_NUMERO_DE_TELEFONE"; // Número no formato internacional
const char* apiKey = "SEU_API_KEY";
const char* serverAddress = "https://api.callmebot.com/whatsapp.php";

SoftwareSerial SerialArduino(D5, D6); // RX, TX

void setup() {
  Serial.begin(115200);
  SerialArduino.begin(9600);

  // Tenta ler as credenciais WiFi salvas na EEPROM
  EEPROM.begin(512);
  String savedSSID = EEPROM.readString(0);
  String savedPassword = EEPROM.readString(savedSSID.length() + 1);
  EEPROM.end();

  // Se não houver credenciais salvas, inicia como ponto de acesso (AP)
  if (savedSSID.length() == 0) {
    WiFi.softAP(ssid, password);
    Serial.println("Modo AP ativado. Conecte-se a:");
    Serial.print(ssid);
    return;
  }

  // Conecta-se ao WiFi configurado
  conectarWiFi();

  // Inicializa o servidor web para configuração
  server.on("/", HTTP_GET, handleRoot);
  server.on("/save", HTTP_POST, handleSave);

  server.begin();
}

void loop() {
  server.handleClient();

  if (WiFi.status() == WL_CONNECTED && SerialArduino.available() > 0) {
    String input = SerialArduino.readStringUntil('\n');
    if (input.startsWith("Alarme acionado!")) {
      enviarMensagemWhatsApp("Alarme acionado!");
    }
  }
  delay(1000);
}

void handleRoot() {
  String html = "<html><body><h1>Configuração NodeMCU</h1>";
  html += "<form method='POST' action='/save'>";
  html += "SSID: <input type='text' name='ssid'><br>";
  html += "Password: <input type='password' name='password'><br>";
  html += "<input type='submit' value='Salvar'>";
  html += "</form></body></html>";
  server.send(200, "text/html", html);
}

void handleSave() {
  String newSSID = server.arg("ssid");
  String newPassword = server.arg("password");

  // Validar entrada de dados
  if (newSSID.length() == 0 || newPassword.length() == 0) {
    server.send(400, "text/plain", "SSID e senha são obrigatórios");
    return;
  }

  // Salvar as novas credenciais na EEPROM
  EEPROM.begin(512);
  EEPROM.writeString(0, newSSID);
  EEPROM.writeString(newSSID.length() + 1, newPassword);
  EEPROM.commit();
  EEPROM.end();

  server.send(200, "text/plain", "Configurações salvas. Reiniciando...");
  delay(2000);
  ESP.restart();
}

// Função para conectar ao WiFi com tratamento de erros
void conectarWiFi() {
  WiFi.begin(ssid, password);
  Serial.println("Conectando ao WiFi...");
  int tentativas = 0;
  while (WiFi.status() != WL_CONNECTED && tentativas < 10) {
    delay(500);
    Serial.print(".");
    tentativas++;
  }
  Serial.println("");
  if (WiFi.status() == WL_CONNECTED) {
    Serial.print("Conectado ao WiFi com IP: ");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println("Falha ao conectar ao WiFi. Reiniciando...");
    delay(2000);
    ESP.restart();
  }
}

// Função para enviar mensagem via WhatsApp com tratamento de erros
void enviarMensagemWhatsApp(String message) {
  String url = String(serverAddress) + "?phone=" + String(phoneNumber) + "&apikey=" + String(apiKey) + "&text=" + urlEncode(message);
  WiFiClientSecure client; // Cliente HTTP seguro para HTTPS
  HTTPClient http;

  http.setTimeout(10000); // Timeout de 10 segundos para a conexão HTTP

  try {
    if (http.begin(client, url)) {
      http.addHeader("Content-Type", "application/x-www-form-urlencoded");
      int httpResponseCode = http.POST(url);
      if (httpResponseCode == 200) {
        Serial.println("Mensagem enviada com sucesso");
      } else {
        Serial.print("Erro no envio da mensagem. Código de resposta HTTP: ");
        Serial.println(httpResponseCode);
      }
      http.end(); // Fecha a conexão HTTP após o uso
    } else {
      Serial.println("Falha ao iniciar conexão HTTP");
    }
  } catch (const std::exception& e) {
    Serial.print("Exceção durante o envio da mensagem: ");
    Serial.println(e.what());
  }
}
