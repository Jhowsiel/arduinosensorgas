#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <EEPROM.h>
#include <WiFiClientSecure.h>

ESP8266WebServer server(80);

const char* ssid = "SEU_SSID";
const char* password = "SUA_SENHA_WIFI";
const char* phoneNumber = "5511946728323"; // Número no formato internacional
const char* apiKey = "1414333";
const char* serverAddress = "api.callmebot.com"; // Apenas o host sem protocolo

void setup() {
  Serial.begin(115200);

  // Tenta ler as credenciais WiFi salvas na EEPROM
  EEPROM.begin(512);
  String savedSSID;
  String savedPassword;
  EEPROM.get(0, savedSSID);
  EEPROM.get(savedSSID.length() + 1, savedPassword);
  EEPROM.end();

  // Se não houver credenciais salvas, inicia como ponto de acesso (AP)
  if (savedSSID.length() == 0) {
    WiFi.softAP(ssid, password);
    Serial.println("Modo AP ativado. Conecte-se a:");
    Serial.print(ssid);
    return;
  }

  // Conecta-se ao WiFi configurado
  conectarWiFi();

  // Inicializa o servidor web para configuração
  server.on("/", HTTP_GET, handleRoot);
  server.on("/save", HTTP_POST, handleSave);

  server.begin();
}

void loop() {
  server.handleClient();

  if (WiFi.status() == WL_CONNECTED) {
    // Aqui você pode inserir lógica para ler dados do seu dispositivo, como o acionamento de alarme.
    // Exemplo: if (digitalRead(SEU_PINO) == HIGH) enviarMensagemWhatsApp("Alarme acionado!");
  }
  delay(1000);
}

void handleRoot() {
  String html = "<html><body><h1>Configuração NodeMCU</h1>";
  html += "<form method='POST' action='/save'>";
  html += "SSID: <input type='text' name='ssid'><br>";
  html += "Password: <input type='password' name='password'><br>";
  html += "<input type='submit' value='Salvar'>";
  html += "</form></body></html>";
  server.send(200, "text/html", html);
}

void handleSave() {
  String newSSID = server.arg("ssid");
  String newPassword = server.arg("password");

  // Validar entrada de dados
  if (newSSID.length() == 0 || newPassword.length() == 0) {
    server.send(400, "text/plain", "SSID e senha são obrigatórios");
    return;
  }

  // Salvar as novas credenciais na EEPROM
  EEPROM.begin(512);
  EEPROM.put(0, newSSID);
  EEPROM.put(newSSID.length() + 1, newPassword);
  EEPROM.commit();
  EEPROM.end();

  server.send(200, "text/plain", "Configurações salvas. Reiniciando...");
  delay(2000);
  ESP.restart();
}

// Função para conectar ao WiFi com tratamento de erros
void conectarWiFi() {
  WiFi.begin(ssid, password);
  Serial.println("Conectando ao WiFi...");
  int tentativas = 0;
  while (WiFi.status() != WL_CONNECTED && tentativas < 10) {
    delay(500);
    Serial.print(".");
    tentativas++;
  }
  Serial.println("");
  if (WiFi.status() == WL_CONNECTED) {
    Serial.print("Conectado ao WiFi com IP: ");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println("Falha ao conectar ao WiFi. Reiniciando...");
    delay(2000);
    ESP.restart();
  }
}

// Função para codificar URL manualmente
String urlEncode(const String& message) {
  const char* hex = "0123456789ABCDEF";
  String encodedMessage = "";

  for (size_t i = 0; i < message.length(); i++) {
    char c = message.charAt(i);
    if (isalnum(c) || c == '-' || c == '_' || c == '.' || c == '~') {
      encodedMessage += c;
    } else if (c == ' ') {
      encodedMessage += '+';
    } else {
      encodedMessage += '%';
      encodedMessage += hex[(c >> 4) & 0xF];
      encodedMessage += hex[c & 0xF];
    }
    yield(); // permite que o ESP8266 atenda a outras tarefas enquanto codifica
  }

  return encodedMessage;
}

// Função para enviar mensagem via WhatsApp com tratamento de erros
void enviarMensagemWhatsApp(String message) {
  WiFiClientSecure client; // Cliente HTTP seguro para HTTPS
  String encodedMessage = urlEncode(message);
  String url = "/whatsapp.php?phone=" + String(phoneNumber) + "&apikey=" + String(apiKey) + "&text=" + encodedMessage;

  if (client.connect(serverAddress, 443)) { // Conexão HTTPS para o servidor
    client.print(String("GET ") + url + " HTTP/1.1\r\n" +
                 "Host: " + serverAddress + "\r\n" +
                 "User-Agent: ESP8266\r\n" +
                 "Connection: close\r\n\r\n");

    // Aguarda a resposta do servidor
    while (client.connected()) {
      String line = client.readStringUntil('\n');
      if (line == "\r") {
        break;
      }
    }

    client.stop(); // Fecha a conexão
    Serial.println("Mensagem enviada com sucesso");
  } else {
    Serial.println("Falha ao conectar ao servidor");
  }
}
